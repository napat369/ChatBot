version: '3.8'

services:
  # MySQL数据库服务
  mysql:
    image: mysql:8.0
    container_name: deepsmart-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-chatbot}
      MYSQL_USER: ${MYSQL_USER:-chatbot_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-chatbot123}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deploy/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - deepsmart-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: deepsmart-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER:-chatbot_user}:${MYSQL_PASSWORD:-chatbot123}@mysql:3306/${MYSQL_DATABASE:-chatbot}?charset=utf8mb4
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - deepsmart-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: deepsmart-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - deepsmart-network
    depends_on:
      - backend
    volumes:
      - ./deploy/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: deepsmart-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - deepsmart-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  deepsmart-network:
    driver: bridge